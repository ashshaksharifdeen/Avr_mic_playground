
GccApplicationkey7.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000000  00800100  00800100  00000184  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         00000130  00000000  00000000  00000054  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .comment      00000030  00000000  00000000  00000184  2**0
                  CONTENTS, READONLY
  3 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  000001b4  2**2
                  CONTENTS, READONLY
  4 .debug_aranges 00000020  00000000  00000000  000001f4  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_info   0000077a  00000000  00000000  00000214  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_abbrev 00000676  00000000  00000000  0000098e  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_line   00000277  00000000  00000000  00001004  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_frame  00000024  00000000  00000000  0000127c  2**2
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_str    0000039f  00000000  00000000  000012a0  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    00000110  00000000  00000000  0000163f  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_ranges 00000028  00000000  00000000  0000174f  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 34 00 	jmp	0x68	; 0x68 <__ctors_end>
   4:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
   8:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
   c:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  10:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  14:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  18:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  1c:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  20:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  24:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  28:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  2c:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  30:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  34:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  38:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  3c:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  40:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  44:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  48:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  4c:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  50:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  54:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  58:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  5c:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  60:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  64:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>

00000068 <__ctors_end>:
  68:	11 24       	eor	r1, r1
  6a:	1f be       	out	0x3f, r1	; 63
  6c:	cf ef       	ldi	r28, 0xFF	; 255
  6e:	d8 e0       	ldi	r29, 0x08	; 8
  70:	de bf       	out	0x3e, r29	; 62
  72:	cd bf       	out	0x3d, r28	; 61
  74:	0e 94 40 00 	call	0x80	; 0x80 <main>
  78:	0c 94 96 00 	jmp	0x12c	; 0x12c <_exit>

0000007c <__bad_interrupt>:
  7c:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000080 <main>:
int main(void)
{
    /* Replace with your application code */
	
    while(1){
		if ((PINB & (1 << PINB1)) == 0)
  80:	19 9b       	sbis	0x03, 1	; 3
  82:	22 c0       	rjmp	.+68     	; 0xc8 <main+0x48>
  84:	51 c0       	rjmp	.+162    	; 0x128 <main+0xa8>
		{
	    for (int i = 0, j = 7; i <= 3; i++, j--)
	    {
		    PORTD |= (1 << i) | (1 << j);
  86:	4b b1       	in	r20, 0x0b	; 11
  88:	81 e0       	ldi	r24, 0x01	; 1
  8a:	90 e0       	ldi	r25, 0x00	; 0
  8c:	fc 01       	movw	r30, r24
  8e:	02 2e       	mov	r0, r18
  90:	02 c0       	rjmp	.+4      	; 0x96 <main+0x16>
  92:	ee 0f       	add	r30, r30
  94:	ff 1f       	adc	r31, r31
  96:	0a 94       	dec	r0
  98:	e2 f7       	brpl	.-8      	; 0x92 <main+0x12>
  9a:	06 2e       	mov	r0, r22
  9c:	02 c0       	rjmp	.+4      	; 0xa2 <main+0x22>
  9e:	88 0f       	add	r24, r24
  a0:	99 1f       	adc	r25, r25
  a2:	0a 94       	dec	r0
  a4:	e2 f7       	brpl	.-8      	; 0x9e <main+0x1e>
  a6:	8e 2b       	or	r24, r30
  a8:	84 2b       	or	r24, r20
  aa:	8b b9       	out	0x0b, r24	; 11
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
  ac:	4f ef       	ldi	r20, 0xFF	; 255
  ae:	89 e6       	ldi	r24, 0x69	; 105
  b0:	98 e1       	ldi	r25, 0x18	; 24
  b2:	41 50       	subi	r20, 0x01	; 1
  b4:	80 40       	sbci	r24, 0x00	; 0
  b6:	90 40       	sbci	r25, 0x00	; 0
  b8:	e1 f7       	brne	.-8      	; 0xb2 <main+0x32>
  ba:	00 c0       	rjmp	.+0      	; 0xbc <main+0x3c>
  bc:	00 00       	nop
    /* Replace with your application code */
	
    while(1){
		if ((PINB & (1 << PINB1)) == 0)
		{
	    for (int i = 0, j = 7; i <= 3; i++, j--)
  be:	2f 5f       	subi	r18, 0xFF	; 255
  c0:	3f 4f       	sbci	r19, 0xFF	; 255
  c2:	61 50       	subi	r22, 0x01	; 1
  c4:	71 09       	sbc	r23, r1
  c6:	04 c0       	rjmp	.+8      	; 0xd0 <main+0x50>
  c8:	67 e0       	ldi	r22, 0x07	; 7
  ca:	70 e0       	ldi	r23, 0x00	; 0
  cc:	20 e0       	ldi	r18, 0x00	; 0
  ce:	30 e0       	ldi	r19, 0x00	; 0
  d0:	24 30       	cpi	r18, 0x04	; 4
  d2:	31 05       	cpc	r19, r1
  d4:	c4 f2       	brlt	.-80     	; 0x86 <main+0x6>
  d6:	64 e0       	ldi	r22, 0x04	; 4
  d8:	70 e0       	ldi	r23, 0x00	; 0
  da:	23 e0       	ldi	r18, 0x03	; 3
  dc:	30 e0       	ldi	r19, 0x00	; 0
  de:	21 c0       	rjmp	.+66     	; 0x122 <main+0xa2>
	    }

	    // Turn off LEDs from middle LEDs to both ends
	    for (int i = 3, j = 4; i >= 0; i--, j++)
	    {
		    PORTD &= ~((1 << i) | (1 << j));
  e0:	4b b1       	in	r20, 0x0b	; 11
  e2:	81 e0       	ldi	r24, 0x01	; 1
  e4:	90 e0       	ldi	r25, 0x00	; 0
  e6:	fc 01       	movw	r30, r24
  e8:	02 2e       	mov	r0, r18
  ea:	02 c0       	rjmp	.+4      	; 0xf0 <main+0x70>
  ec:	ee 0f       	add	r30, r30
  ee:	ff 1f       	adc	r31, r31
  f0:	0a 94       	dec	r0
  f2:	e2 f7       	brpl	.-8      	; 0xec <main+0x6c>
  f4:	06 2e       	mov	r0, r22
  f6:	02 c0       	rjmp	.+4      	; 0xfc <main+0x7c>
  f8:	88 0f       	add	r24, r24
  fa:	99 1f       	adc	r25, r25
  fc:	0a 94       	dec	r0
  fe:	e2 f7       	brpl	.-8      	; 0xf8 <main+0x78>
 100:	8e 2b       	or	r24, r30
 102:	80 95       	com	r24
 104:	84 23       	and	r24, r20
 106:	8b b9       	out	0x0b, r24	; 11
 108:	4f ef       	ldi	r20, 0xFF	; 255
 10a:	89 e6       	ldi	r24, 0x69	; 105
 10c:	98 e1       	ldi	r25, 0x18	; 24
 10e:	41 50       	subi	r20, 0x01	; 1
 110:	80 40       	sbci	r24, 0x00	; 0
 112:	90 40       	sbci	r25, 0x00	; 0
 114:	e1 f7       	brne	.-8      	; 0x10e <main+0x8e>
 116:	00 c0       	rjmp	.+0      	; 0x118 <main+0x98>
 118:	00 00       	nop
		    PORTD |= (1 << i) | (1 << j);
		    _delay_ms(500);
	    }

	    // Turn off LEDs from middle LEDs to both ends
	    for (int i = 3, j = 4; i >= 0; i--, j++)
 11a:	21 50       	subi	r18, 0x01	; 1
 11c:	31 09       	sbc	r19, r1
 11e:	6f 5f       	subi	r22, 0xFF	; 255
 120:	7f 4f       	sbci	r23, 0xFF	; 255
 122:	33 23       	and	r19, r19
 124:	ec f6       	brge	.-70     	; 0xe0 <main+0x60>
 126:	ac cf       	rjmp	.-168    	; 0x80 <main>
		    PORTD &= ~((1 << i) | (1 << j));
		    _delay_ms(500);
	    }
		}
		else{
		  PORTD=0;
 128:	1b b8       	out	0x0b, r1	; 11
 12a:	aa cf       	rjmp	.-172    	; 0x80 <main>

0000012c <_exit>:
 12c:	f8 94       	cli

0000012e <__stop_program>:
 12e:	ff cf       	rjmp	.-2      	; 0x12e <__stop_program>
