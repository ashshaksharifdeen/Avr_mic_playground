
GccApplication6_knightrider.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000000  00800100  00800100  00000176  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         00000122  00000000  00000000  00000054  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .comment      00000030  00000000  00000000  00000176  2**0
                  CONTENTS, READONLY
  3 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  000001a8  2**2
                  CONTENTS, READONLY
  4 .debug_aranges 00000020  00000000  00000000  000001e8  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_info   00000760  00000000  00000000  00000208  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_abbrev 00000676  00000000  00000000  00000968  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_line   0000029d  00000000  00000000  00000fde  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_frame  00000024  00000000  00000000  0000127c  2**2
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_str    000003b1  00000000  00000000  000012a0  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    000000d0  00000000  00000000  00001651  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_ranges 00000028  00000000  00000000  00001721  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 34 00 	jmp	0x68	; 0x68 <__ctors_end>
   4:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
   8:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
   c:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  10:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  14:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  18:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  1c:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  20:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  24:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  28:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  2c:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  30:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  34:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  38:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  3c:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  40:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  44:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  48:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  4c:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  50:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  54:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  58:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  5c:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  60:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  64:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>

00000068 <__ctors_end>:
  68:	11 24       	eor	r1, r1
  6a:	1f be       	out	0x3f, r1	; 63
  6c:	cf ef       	ldi	r28, 0xFF	; 255
  6e:	d8 e0       	ldi	r29, 0x08	; 8
  70:	de bf       	out	0x3e, r29	; 62
  72:	cd bf       	out	0x3d, r28	; 61
  74:	0e 94 40 00 	call	0x80	; 0x80 <main>
  78:	0c 94 8f 00 	jmp	0x11e	; 0x11e <_exit>

0000007c <__bad_interrupt>:
  7c:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000080 <main>:
#include <util/delay.h>

int main(void)
{
    /* Replace with your application code */
 DDRD = 0xFF; // Set PORTD pins as output for LEDs
  80:	8f ef       	ldi	r24, 0xFF	; 255
  82:	8a b9       	out	0x0a, r24	; 10
 DDRB &= ~(1 << DDB1); // Set PINB1 as input for the switch
  84:	84 b1       	in	r24, 0x04	; 4
  86:	8d 7f       	andi	r24, 0xFD	; 253
  88:	84 b9       	out	0x04, r24	; 4
 PORTB |= (1 << PINB1); // Enable the internal pull-up resistor for PINB1   
  8a:	85 b1       	in	r24, 0x05	; 5
  8c:	82 60       	ori	r24, 0x02	; 2
  8e:	85 b9       	out	0x05, r24	; 5
 while(1)
 {
	if ((PINB & (1 << PINB1)) == 0) // Check if switch is pressed
  90:	19 9b       	sbis	0x03, 1	; 3
  92:	1d c0       	rjmp	.+58     	; 0xce <main+0x4e>
  94:	42 c0       	rjmp	.+132    	; 0x11a <main+0x9a>
	{
	for (int i=1;i<=8;i++)
	{
		PORTD |=(1 << i);
  96:	4b b1       	in	r20, 0x0b	; 11
  98:	81 e0       	ldi	r24, 0x01	; 1
  9a:	90 e0       	ldi	r25, 0x00	; 0
  9c:	02 2e       	mov	r0, r18
  9e:	02 c0       	rjmp	.+4      	; 0xa4 <main+0x24>
  a0:	88 0f       	add	r24, r24
  a2:	99 1f       	adc	r25, r25
  a4:	0a 94       	dec	r0
  a6:	e2 f7       	brpl	.-8      	; 0xa0 <main+0x20>
  a8:	94 2f       	mov	r25, r20
  aa:	98 2b       	or	r25, r24
  ac:	9b b9       	out	0x0b, r25	; 11
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
  ae:	4f ef       	ldi	r20, 0xFF	; 255
  b0:	59 e6       	ldi	r21, 0x69	; 105
  b2:	68 e1       	ldi	r22, 0x18	; 24
  b4:	41 50       	subi	r20, 0x01	; 1
  b6:	50 40       	sbci	r21, 0x00	; 0
  b8:	60 40       	sbci	r22, 0x00	; 0
  ba:	e1 f7       	brne	.-8      	; 0xb4 <main+0x34>
  bc:	00 c0       	rjmp	.+0      	; 0xbe <main+0x3e>
  be:	00 00       	nop
		_delay_ms(500);
		PORTD &=~(1 << i);
  c0:	9b b1       	in	r25, 0x0b	; 11
  c2:	80 95       	com	r24
  c4:	89 23       	and	r24, r25
  c6:	8b b9       	out	0x0b, r24	; 11
 PORTB |= (1 << PINB1); // Enable the internal pull-up resistor for PINB1   
 while(1)
 {
	if ((PINB & (1 << PINB1)) == 0) // Check if switch is pressed
	{
	for (int i=1;i<=8;i++)
  c8:	2f 5f       	subi	r18, 0xFF	; 255
  ca:	3f 4f       	sbci	r19, 0xFF	; 255
  cc:	02 c0       	rjmp	.+4      	; 0xd2 <main+0x52>
  ce:	21 e0       	ldi	r18, 0x01	; 1
  d0:	30 e0       	ldi	r19, 0x00	; 0
  d2:	29 30       	cpi	r18, 0x09	; 9
  d4:	31 05       	cpc	r19, r1
  d6:	fc f2       	brlt	.-66     	; 0x96 <main+0x16>
  d8:	28 e0       	ldi	r18, 0x08	; 8
  da:	30 e0       	ldi	r19, 0x00	; 0
  dc:	1b c0       	rjmp	.+54     	; 0x114 <main+0x94>
		//Effectively, this code turns off the LED connected to the specific pin (pin) on Port D, while preserving the state of other pins.
		
	}
	for (int i=8;i>=0;i--)
	{
		PORTD |=(1 << i);
  de:	4b b1       	in	r20, 0x0b	; 11
  e0:	81 e0       	ldi	r24, 0x01	; 1
  e2:	90 e0       	ldi	r25, 0x00	; 0
  e4:	02 2e       	mov	r0, r18
  e6:	02 c0       	rjmp	.+4      	; 0xec <main+0x6c>
  e8:	88 0f       	add	r24, r24
  ea:	99 1f       	adc	r25, r25
  ec:	0a 94       	dec	r0
  ee:	e2 f7       	brpl	.-8      	; 0xe8 <main+0x68>
  f0:	94 2f       	mov	r25, r20
  f2:	98 2b       	or	r25, r24
  f4:	9b b9       	out	0x0b, r25	; 11
  f6:	4f ef       	ldi	r20, 0xFF	; 255
  f8:	59 e6       	ldi	r21, 0x69	; 105
  fa:	68 e1       	ldi	r22, 0x18	; 24
  fc:	41 50       	subi	r20, 0x01	; 1
  fe:	50 40       	sbci	r21, 0x00	; 0
 100:	60 40       	sbci	r22, 0x00	; 0
 102:	e1 f7       	brne	.-8      	; 0xfc <main+0x7c>
 104:	00 c0       	rjmp	.+0      	; 0x106 <main+0x86>
 106:	00 00       	nop
		_delay_ms(500);
		PORTD &=~(1 << i);
 108:	9b b1       	in	r25, 0x0b	; 11
 10a:	80 95       	com	r24
 10c:	89 23       	and	r24, r25
 10e:	8b b9       	out	0x0b, r24	; 11
		
		//PORTD &= ~(1 << pin) performs a bitwise AND operation between the current value of the PORTD register and the inverted value from step 2. This ensures that all other bits in the PORTD register remain unchanged, while the bit corresponding to the pin is set to 0.
		//Effectively, this code turns off the LED connected to the specific pin (pin) on Port D, while preserving the state of other pins.
		
	}
	for (int i=8;i>=0;i--)
 110:	21 50       	subi	r18, 0x01	; 1
 112:	31 09       	sbc	r19, r1
 114:	33 23       	and	r19, r19
 116:	1c f7       	brge	.-58     	; 0xde <main+0x5e>
 118:	bb cf       	rjmp	.-138    	; 0x90 <main+0x10>
		
	}
	}
	else
	{
		PORTD=0;
 11a:	1b b8       	out	0x0b, r1	; 11
 11c:	b9 cf       	rjmp	.-142    	; 0x90 <main+0x10>

0000011e <_exit>:
 11e:	f8 94       	cli

00000120 <__stop_program>:
 120:	ff cf       	rjmp	.-2      	; 0x120 <__stop_program>
